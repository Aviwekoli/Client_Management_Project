<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clients</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Basic styles for the modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 5px;
            width: 500px;
            max-width: 100%;
            max-height: 80%; /* Limit modal height */
            overflow-y: auto; /* Allow scrolling if content overflows */
            position: relative;
        }
        .close-button {
            position: absolute;
            top: 10px;
            right: 15px;
            cursor: pointer;
            font-size: 18px;
        }
        .pagination {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Clients</h1>

    <!-- Display client list conditionally -->
    <% if (clients.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <th style="text-align: left;">Name</th>
                    <th style="text-align: left;">Client Code</th>
                    <th style="text-align: center;">Linked Accounts</th>
                    <th style="text-align: center;">Actions</th>
                </tr>
            </thead>
            <tbody>
                <% clients.forEach(client => { %>
                    <tr data-client-id="<%= client.id %>"></tr>
                        <td><%= client.name %></td>
                        <td><%= client.client_code %></td>
                        <td style="text-align: center;" data-column="linked_accounts"><%= client.linked_accounts %></td>
                        <td style="text-align: center;">
                            <button onclick="openLinkContactModal(<%= client.id %>)">Link Contact</button>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    <% } else { %>
        <p>No client(s) found.</p>
    <% } %>

    <!-- Modal for creating a new client -->
    <div id="clientModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('clientModal')">&times;</span>
            <h2>Create a New Client</h2>
            <form action="/clients/create" method="POST">
                <div>
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <button type="submit">Save Client</button>
            </form>
        </div>
    </div>

    <!-- Modal for linking contacts -->
    <div id="linkContactModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('linkContactModal')">&times;</span>
            <h2>Link Contacts to Client</h2>
            <div id="contactsList">
                <!-- Contacts will be loaded here dynamically -->
            </div>
            <div class="pagination">
                <button id="prevPageBtn" onclick="loadContacts(currentPage - 1)" disabled>Previous</button>
                <button id="nextPageBtn" onclick="loadContacts(currentPage + 1)">Next</button>
            </div>
            <button onclick="linkSelectedContacts(selectedClientId)">Link Selected Contacts</button>
        </div>
    </div>

    <script>
        let selectedClientId;
        let currentPage = 0; // Current page of contacts
        const contactsPerPage = 5; // Number of contacts to show per page
        let contacts = []; // Store all contacts loaded

        // Open the client creation modal
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'flex';
        }

        // Close the specified modal
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Open the Link Contact modal for a specific client and load contacts
        function openLinkContactModal(clientId) {
            console.log("Opening modal for client ID:", clientId); 
            selectedClientId = clientId;
            openModal('linkContactModal');
            loadContacts(clientId);
        }
        function updateLinkedAccountsCount(clientId, linkedAccount) {
            const row = document.querySelector(`tr[data-client-id="${clientId}"]`);
            if (row) {
                const linkedAccountsCell = row.querySelector('td[data-column="linked_accounts"]');
                //const currentCount = parseInt(linkedAccountsCell.textContent, 10) || 0;
                //linkedAccountsCell.textContent = currentCount + countChange;
                linkedAccountsCell.textContent = linkedCount;
            }
        }
        // Fetch contacts and populate the contactsList in the Link Contact modal
        function loadContacts(clientId, page = 0) {
            console.log("Loading contacts... Page:", page);
            fetch('/contacts/json')
                .then(response => response.json())
                .then(data => {
                    contacts = data;
                    fetchLinkedContacts(clientId);
                    updateContactList(page);
                })
                .catch(error => console.error('Error loading contacts:', error));
        }

        // Fetch the already linked contacts for the selected client
        function fetchLinkedContacts(clientId) {
            fetch(`/clients/${clientId}/linkedContacts`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error fetching linked contacts');
                    }
                    return response.json();
                })
                .then(linkedContacts => {
                    const checkboxes = document.querySelectorAll('.contact-checkbox');
                    checkboxes.forEach(checkbox => {
                        const contactId = parseInt(checkbox.value, 10);
                        if (linkedContacts.some(contact => contact.id === contactId)) {
                            checkbox.checked = true;  // Mark checkboxes for linked contacts
                        } else {
                            checkbox.checked = false; // Unmark checkboxes for unlinked contacts
                        }
                    });
                })
                .catch(error => console.error('Error fetching linked contacts:', error));
        }

        // Update the contacts list based on the current page
        function updateContactList(page) {
            const contactsList = document.getElementById('contactsList');
            const start = page * contactsPerPage;
            const end = start + contactsPerPage;
            const paginatedContacts = contacts.slice(start, end);

            contactsList.innerHTML = paginatedContacts.map(contact => `
                <div>
                    <input type="checkbox" class="contact-checkbox" value="${contact.id}" />
                    ${contact.name} ${contact.surname}
                </div>
            `).join('');

            // Update pagination buttons
            document.getElementById('prevPageBtn').disabled = (page === 0);
            document.getElementById('nextPageBtn').disabled = (end >= contacts.length);
            currentPage = page; // Update current page
        }

        // Link selected contacts to the client and close the modal
        function linkSelectedContacts(clientId) {
            //console.log("Function called with clientId:", clientId);
            //alert(`Linking contacts for client ID: ${clientId}`);
            const selectedContactIds = Array.from(document.querySelectorAll('.contact-checkbox:checked'))
                                          .map(checkbox => checkbox.value);

            const contactIndexes = selectedContactIds.map(id => parseInt(id, 10));

            const selectedContacts = contacts.filter(contact => contactIndexes.includes(contact.id))
            const allContactIds = contacts.map(contact => contact.id);

            // Find contacts that were unchecked and should be delinked
            const delinkedContactIds = allContactIds.filter(contactId => 
                !selectedContactIds.includes(contactId.toString()) // Check if contact is unchecked
            );

            fetch('/clients/linkContacts', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ clientId: selectedClientId, linkIds: contactIndexes, unlinkIds: delinkedContactIds })
            }).then(response => {
                if (response.ok) {
                    closeModal('linkContactModal');
                    updateLinkedAccountsCount(selectedClientId, contactIndexes.length);
                    updateClientLinkedContacts(selectedClientId, selectedContacts);
                }
            }).catch(error => console.error('Error linking contacts:', error));
        }

        function updateClientLinkedContacts(clientId, newContacts) {
            const row = document.querySelector(`tr[data-client-id="${clientId}"]`);
            if (row) {
                const linkedAccountsCell = row.querySelector('td[data-column="linked_accounts"]');
                const existingContacts = linkedAccountsCell.textContent.trim();
                
                // Create a string of the newly linked contacts, for example: "John Doe, Jane Smith"
                const newContactNames = newContacts.map(contact => contact.name + ' ' + contact.surname).join(', ');

                // Append the new contact names to the existing ones
                linkedAccountsCell.textContent = existingContacts + (existingContacts ? ', ' : '') + newContactNames;
            }
        }
    </script>
</body>
</html>
